act as expert in nextjs reactjs development using typescript and tailwind css and do fbelow task 

understand below components update code of below components such that all nextjs & reactjs best coding practices are followed 

├── CartCheckoutButton.tsx

const CartCheckoutButton = () => {
  return (
    <div className="bg-white p-6 rounded-lg shadow-md mb-6 flex justify-center">
      <button className="px-6 py-3 bg-black text-white rounded-lg hover:bg-gray-800 transition duration-150">
        Proceed to Checkout
      </button>
    </div>
  );
};

export default CartCheckoutButton;


├── CartOverview.tsx

const CartOverview = () => {
  return (
    <div className="bg-white p-6 rounded-lg shadow-md mb-6">
      <h1 className="text-2xl font-bold text-gray-900">Your Cart</h1>
    </div>
  );
};

export default CartOverview;



├── CartPriceSummary.tsx

/* eslint-disable @typescript-eslint/no-unused-vars */
import { useEffect, useState } from "react";

interface ProductInCart {
  id: number;  // Adjust based on your actual product ID type
  product: {
    id: number;      // Adjust based on your actual product ID type
    name: string;
    price: number;
    // Add other product fields as needed
  };
  quantity: number;
}

interface CartPriceSummaryProps {
  cartId: string;
}

const CartPriceSummary: React.FC<CartPriceSummaryProps> = ({ cartId }) => {
  const [productsInCart, setProductsInCart] = useState<ProductInCart[]>([]);

  useEffect(() => {
    const fetchProducts = async () => {
      const response = await fetch(`/api/productsInCart/by-cart-id/${cartId}`);
      console.log('response :: ', response);
      const data = await response.json();
      console.log('data :: ', data);
      setProductsInCart(Array.isArray(data) ? data : []);
    };

    fetchProducts();
  }, [cartId]);

  // Calculate total price and quantity
  const totalPrice = productsInCart.reduce((total, productInCart) => {
    return total + productInCart.product.price * productInCart.quantity;
  }, 0);

  const totalQuantity = productsInCart.reduce((total, productInCart) => {
    return total + productInCart.quantity;
  }, 0);

  return (
    <div className="bg-white text-black p-6 rounded-lg shadow-md mb-6">
      <h2 className="text-2xl font-semibold mb-4">Cart Price Summary</h2>
      {productsInCart.length === 0 ? (
        <p>Your cart is empty.</p>
      ) : (
        <div>
          {/* Detailed Product List */}
          <table className="min-w-full border border-gray-300">
            <thead>
              <tr className="border-b bg-gray-100">
                <th className="text-left py-2 px-4">Product</th>
                <th className="text-right py-2 px-4">Price</th>
                <th className="text-right py-2 px-4">Quantity</th>
                <th className="text-right py-2 px-4">Subtotal</th>
              </tr>
            </thead>
            <tbody>
              {productsInCart.map((productInCart) => {
                const subtotal = productInCart.product.price * productInCart.quantity;
                return (
                  <tr key={productInCart.id} className="border-b">
                    <td className="py-2 px-4">{productInCart.product.name}</td>
                    <td className="text-right py-2 px-4">${productInCart.product.price.toFixed(2)}</td>
                    <td className="text-right py-2 px-4">{productInCart.quantity}</td>
                    <td className="text-right py-2 px-4">${subtotal.toFixed(2)}</td>
                  </tr>
                );
              })}
            </tbody>
          </table>

          {/* Summary */}
          <div className="mt-4">
            <p>Total Items: {totalQuantity}</p>
            <p className="font-semibold">Total Price: ${totalPrice.toFixed(2)}</p>
          </div>
        </div>
      )}
    </div>
  );
};

export default CartPriceSummary;



├── CartProductList.tsx

/* eslint-disable @typescript-eslint/no-unused-vars */
import { useEffect, useState } from 'react';

interface ProductInCart {
  id: number;  // Adjust based on your actual product ID type
  product: {
    id: number;      // Adjust based on your actual product ID type
    name: string;
    price: number;
    // Add other product fields as needed
  };
  quantity: number;
}

interface CartProductListProps {
  cartId: string;
}

const CartProductList: React.FC<CartProductListProps> = ({ cartId }) => {
  const [productsInCart, setProductsInCart] = useState<ProductInCart[]>([]);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);

  useEffect(() => {
    const fetchProducts = async () => {
      const response = await fetch(`/api/productsInCart/by-cart-id/${cartId}`);
      console.log('response :: ', response);
      const data = await response.json();
      console.log('data :: ', data);
      // Ensure data is an array
      setProductsInCart(Array.isArray(data) ? data : []);
    };

    fetchProducts();
  }, [cartId]);

  // Function to increase quantity
  const increaseQuantity = (productId: number) => {
    setProductsInCart(prevProducts =>
      prevProducts.map(productInCart =>
        productInCart.id === productId
          ? { ...productInCart, quantity: productInCart.quantity + 1 }
          : productInCart
      )
    );
  };

  // Function to decrease quantity
  const decreaseQuantity = (productId: number) => {
    setProductsInCart(prevProducts =>
      prevProducts.map(productInCart =>
        productInCart.id === productId
          ? { ...productInCart, quantity: Math.max(1, productInCart.quantity - 1) } // Prevent quantity from going below 1
          : productInCart
      )
    );
  };

  // Function to remove product from cart
  const removeProductInCart = async (productInCartId: number) => {
    console.log('removing productInCart :: ', productInCartId);
    console.log('removing this product from cart with id :: ', cartId);

    const response = await fetch(`/api/carts/remove-product-in-cart/${cartId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        productInCartToRemove: { productInCartId },
        putOperationType: 'removeProductInCart'
      }),
    });

    console.log('response :: ', response);

    if (response.ok) {
      // Refresh the product list
      const updatedProductsResponse = await fetch(`/api/productsInCart/by-cart-id/${cartId}`);
      const updatedProductsData = await updatedProductsResponse.json();
      setProductsInCart(Array.isArray(updatedProductsData) ? updatedProductsData : []);
      
      // Set success message
      setSuccessMessage('Product removed from cart successfully!');

      // Clear success message after 3 seconds
      setTimeout(() => {
        setSuccessMessage(null);
      }, 3000);
    } else {
      console.error('Error removing product from cart:', await response.text());
      setSuccessMessage('Failed to remove product from cart. Please try again.');
    }
  };

  return (
    <div className="bg-white p-6 rounded-lg shadow-md mb-6">
      <h2 className="text-xl font-semibold text-gray-900 mb-4">Products in Your Cart</h2>
      {successMessage && (
        <div className="mb-4 text-green-600">
          {successMessage}
        </div>
      )}
      {productsInCart.length === 0 ? (
        <p className="text-gray-700">Your cart is empty.</p>
      ) : (
        productsInCart.map(productInCart => (
          <div key={productInCart.id} className="flex items-center justify-between py-4 border-b border-gray-200">
            <div className="flex items-center">
              {/* Replace with actual product image if available */}
              <img
                src="/path/to/product-image.jpg" // Use actual image path or URL
                alt={productInCart.product.name}
                className="w-16 h-16 object-cover border rounded-lg"
              />
              <div className="ml-4">
                <h3 className="text-lg font-medium text-gray-800">{productInCart.product.name}</h3>
                <p className="text-gray-600">Price: ${productInCart.product.price.toFixed(2)}</p>
                <div className="flex items-center mt-2">
                  <button
                    onClick={() => decreaseQuantity(productInCart.id)}
                    className="px-2 py-1 border border-gray-300 rounded hover:bg-gray-100"
                  >
                    -
                  </button>
                  <p className="mx-4 text-gray-600">Quantity: {productInCart.quantity}</p>
                  <button
                    onClick={() => increaseQuantity(productInCart.id)}
                    className="px-2 py-1 border border-gray-300 rounded hover:bg-gray-100"
                  >
                    +
                  </button>
                </div>
              </div>
            </div>
            <button 
              onClick={() => removeProductInCart(productInCart.id)}
              className="text-red-500 hover:text-red-700"
            >Remove
            </button>
          </div>
        ))
      )}
    </div>
  );
};

export default CartProductList;



├── CartSummary.tsx

/* eslint-disable @typescript-eslint/no-unused-vars */
import { useEffect, useState } from "react";

interface ProductInCart {
  id: number;  // Adjust based on your actual product ID type
  product: {
    id: number;      // Adjust based on your actual product ID type
    name: string;
    price: number;
  };
  quantity: number;
}

const CartSummary = ({ cartId }: { cartId: string }) => {
  const [productsInCart, setProductsInCart] = useState<ProductInCart[]>([]);

  useEffect(() => {
    const fetchProducts = async () => {
      const response = await fetch(`/api/productsInCart/by-cart-id/${cartId}`);
      console.log('response :: ', response);
      const data = await response.json();
      console.log('data :: ', data);
      setProductsInCart(Array.isArray(data) ? data : []);
    };

    fetchProducts();
  }, [cartId]);

  // Calculate total price and quantity
  const totalQuantity = productsInCart.reduce((total, productInCart) => {
    return total + productInCart.quantity;
  }, 0);

  const totalPrice = productsInCart.reduce((total, productInCart) => {
    return total + productInCart.product.price * productInCart.quantity;
  }, 0);

  return (
    <div className="bg-white text-black p-6 rounded-lg shadow-md mb-6">
      <h2 className="text-2xl font-semibold mb-4">Cart Summary</h2>
      <p className="mb-2">Items: {totalQuantity > 0 ? totalQuantity : 0}</p>
      <p className="font-semibold">Total Cost: ${totalPrice > 0 ? totalPrice.toFixed(2) : '0.00'}</p>
    </div>
  );
};

export default CartSummary;



└── MyCart.tsx

/* eslint-disable @typescript-eslint/no-unused-vars */

"use client"

import CartOverview from '@/components/mycart/CartOverview';
import CartProductList from '@/components/mycart/CartProductList';
import CartPriceSummary from '@/components/mycart/CartPriceSummary';
import CartCheckoutButton from '@/components/mycart/CartCheckoutButton';
import CartDeliveryInformation from '@/components/mycart/CartDeliveryInformation';
import CartSummary from '@/components/mycart/CartSummary';
import { useEffect, useState } from 'react';
import { useAuth } from '@clerk/nextjs';

// Function to fetch the current user ID
const fetchCurrentUserId = async (currentClerUserId: string | null | undefined): Promise<string> => {
  if (!currentClerUserId) throw new Error('Clerk user ID is required');
  
  const response = await fetch(`/api/users/by-clerk-id/${currentClerUserId}`);
  
  if (!response.ok) throw new Error('Failed to fetch current user ID');
  
  const { id } = await response.json();
  return id;
};

// Function to fetch the current cart ID
const fetchCurrentCartId = async (currentUserId: string): Promise<string> => {
  if (!currentUserId) throw new Error('currentUserId is required');
  
  const response = await fetch(`/api/carts/by-user-id/${currentUserId}`);
  
  if (!response.ok) throw new Error('Failed to fetch current cart ID');
  
  const { id } = await response.json();
  return id;
};

const MyCart = () => {

  const { isLoaded, userId } = useAuth();
  const [error, setError] = useState<string | null>(null);
  const [cartId, setCartId] = useState<string>('');

  useEffect(() => {
    const fetchData = async () => {
      if (isLoaded && userId) {
        try {
          const currentUserId   = await fetchCurrentUserId(userId);
          console.log('currentUserId :: ', currentUserId);
          const id = await fetchCurrentCartId(currentUserId);
          setCartId(id);
        } catch (err) {
          setError(err instanceof Error ? err.message : 'An error occurred');
        }
      }
    };

    fetchData();
  }, [isLoaded, userId]);
  
  return (
    <div className="bg-gray-100 min-h-screen p-6">
      <div className="container mx-auto p-4">
      <CartOverview />
      <CartProductList cartId={cartId} />
      <CartPriceSummary cartId={cartId} />
      <CartSummary cartId={cartId} />
      <CartCheckoutButton />
    </div>
    </div>
  );
};

export default MyCart;



